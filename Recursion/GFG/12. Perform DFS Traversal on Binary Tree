Approach: DFS Traversal i) Preorder: First current node then left side and right side
                        ii) Inorder: First left side then current node and right side
                        iii) Postorder: First left side then right side and current node

Code:
  #include <iostream>
  using namespace std;
  
  struct Node {
      int value;
      Node* left;
      Node* right;
  
      Node(int val) : value(val), left(nullptr), right(nullptr) {}
  };
  
  void preorderTraversal(Node* node) {
      if (node == nullptr) return; 
      cout << node->value << " ";  
      preorderTraversal(node->left); 
      preorderTraversal(node->right); 
  }
  
  void inorderTraversal(Node* node) {
      if (node == nullptr) return; 
      inorderTraversal(node->left); 
      cout << node->value << " ";  
      inorderTraversal(node->right);
  }
  
  void postorderTraversal(Node* node) {
      if (node == nullptr) return; 
      postorderTraversal(node->left); 
      postorderTraversal(node->right); 
      cout << node->value << " ";  
  }
  
  int main() {
      Node* root = new Node(1);
      root->left = new Node(2);
      root->right = new Node(3);
      root->left->left = new Node(4);
      root->left->right = new Node(5);
  
      cout << "Preorder Traversal: ";
      preorderTraversal(root);
      cout << endl;
  
      cout << "Inorder Traversal: ";
      inorderTraversal(root);
      cout << endl;
  
      cout << "Postorder Traversal: ";
      postorderTraversal(root);
      cout << endl;
  
      delete root->left->left;
      delete root->left->right;
      delete root->left;
      delete root->right;
      delete root;
  
      return 0;
  }

Time Complexity: O(n)
Space Complexity: O(logn) for worst case O(n)
