Approach: Take the first element , push in vec and call rec from next index then pop up and do the same for all elements
          Handler other cases like continous similar elements , handling some test cases 

Code:
  class Solution {
private:
    void rec(vector<int>&vec, vector<vector<int>>&ans, vector<int>& candidates, int target, int sum, int index){
        if(sum == target){
            ans.push_back(vec);
            return;
        }
        if(sum>target || index >= candidates.size()) return;
        for(int i = index; i<candidates.size(); i++){
            vec.push_back(candidates[i]);
            rec(vec,ans,candidates,target,sum+candidates[i],i+1);
            vec.pop_back();
            while(i<candidates.size()-1 && candidates[i]==candidates[i+1])
                i++;
        }
    }
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<int>vec;
        vector<vector<int>>ans;
        sort(candidates.begin(),candidates.end());
        rec(vec,ans,candidates,target,0,0);
        return ans;
    }
};

Time Complexity: O(2^n)
Space Complexity: O(2^n)
