Approach: Take the first element , push in vec and call rec from that index then pop up and do the same for all elments

Code:
class Solution {
private:
    void rec(vector<int>&vec, vector<vector<int>>&ans, vector<int>& candidates, int target,int sum, int index) {
        if(sum == target){
            ans.push_back(vec);
            return;
        }
        if(sum>target || index==candidates.size()) return;
        for(int i=index;i<candidates.size();i++){
            vec.push_back(candidates[i]);
            rec(vec,ans,candidates,target,sum+candidates[i],i);
            vec.pop_back();
        }
    }
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<int> vec;
        vector<vector<int>>ans;
        rec(vec,ans,candidates,target,0,0);
        return ans;
    }
};

Time Complexity: O(2^n)
Space Complexiyt: O(2^n)
