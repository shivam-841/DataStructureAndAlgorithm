Recursion Approach: If less than 1 return that or return rec(n-1)+rec(n-2);
  Code:
      int nthFibonacci(int n) {
          if(n<=1) return n;
          return nthFibonacci(n-1)+nthFibonacci(n-2);
      }
  Time Complexity: O(2^n)
  Space Complexity: O(n)

Memoization Approach(Top-Down Approach): Check if final place is not empty if not empty return the value, base condition, then logic and last return the final place value. In base condition as well as in logic always store value.
  Code:
    int memoization(vector<int>& dp, int n){
        if(dp[n]!=-1)
            return dp[n];
        if(n<=1){
            dp[n]=n;
            return n;
        }
        dp[n]=memoization(dp,n-1)+memoization(dp,n-2);
        return dp[n];
    }
 Time Complexity: O(n)
 Space Complexity: O(n)

Tabulation Approach(Bottom-Up Approach): Write the base condition then write the logic for bottom up approach and store all values.
  Code:
      int tabulation(vector<int>& dp, int n){
        if(n<=1){
            dp[n]=n;
            return n;
        }
        dp[0]=0;
        dp[1]=1;
        
        for(int i=2;i<=n;i++){
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n-1];
    }
  Time Complexity: O(n)
  Space Complexity: O(n)

Tabulation Space-Optimized Approach: 
  Code:
      int tabulation(vector<int>& dp, int n){
        if(n<=1){
            dp[n]=n;
            return n;
        }
        int curr = 0;
        int prev1 = 1;
        int prev2 = 1;
        
        for(int i=2;i<n;i++){
            curr = prev1 + prev2;
            prev1 = prev2;
            prev2 = curr;
        }
        return prev2;
    }
Time Complexity: O(n)
Space Complexity: O(1)
