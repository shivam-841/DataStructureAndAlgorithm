Recursion Approach: For each step call two recursion , if on second last step then only one step can be taken
  Code:
        if(n==0) return 1;
        if(n>1){
            return countWays(n-1)+countWays(n-2);
        }
        else 
            return countWays(n-1);
  Time Complexity: O(2^n)
  Space Complexity: O(n)

Memoization Approach (Bottom up approach): 
  Code:
      int memoization(vector<int>&dp, int n){
        if(dp[n]!=-1) return dp[n];
        if(n==0){
            dp[n]=1;
            return 1;
        }
        if(n>1){
            dp[n]=memoization(dp,n-1)+memoization(dp,n-2);
            return dp[n];
        }
        else{
            dp[n]=memoization(dp,n-1);
            return dp[n];
        }
     }
  Time Complexity: O(n)
  Space Complexity: O(n)

Tabulation Approach (Top Down Approach):
  Code:
      vector<int>dp (n+1,-1);
       dp[0]=1;
       for(int i=1;i<n+1;i++){
           if(i>1){
               dp[i]=dp[i-1]+dp[i-2];
           }
           else{
              dp[i]=dp[i-1];
           }
        }
      return dp[n];
  Time Complexity: O(n)
  Space Complexity: O(n)

Space Optimized Approach:
  Code:
      int countWays(int n) {
        int prev1 = 0;
        int prev2 = 1;
        int curr = 0;
        for(int i=0;i<n;i++){
            curr = prev1 + prev2;
            prev1=prev2;
            prev2=curr;
        }
        return prev2;
    }
Time Complexity: O(n)
Space Complexity: O(1)
    
